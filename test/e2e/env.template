# Environment Variables Template for E2E Testing
# Copy this file to .env and fill in the values
# Source it before running tests: source .env

# Management cluster name
export KIND_CLUSTER_NAME="capi-evroc-e2e"

# Workload cluster configuration
export CLUSTER_NAME="evroc-test-cluster"
export KUBERNETES_VERSION="v1.31.4"
export CONTROL_PLANE_MACHINE_COUNT="1"
export WORKER_MACHINE_COUNT="1"

# Evroc credentials
# Path to your Evroc kubeconfig file
export EVROC_CONFIG="${HOME}/.evroc/config.yaml"

# Evroc region and project (REQUIRED)
# These values must match your Evroc Cloud setup
# Example: region="eu-central-1", project="default"
export EVROC_REGION="eu-central-1"
export EVROC_PROJECT="default"

# Evroc infrastructure settings
# VPC name - must exist in your Evroc account or will be created
export EVROC_VPC_NAME="capi-test-vpc"

# Subnet configuration
export EVROC_SUBNET_NAME="capi-test-subnet"
export EVROC_SUBNET_CIDR="10.0.1.0/24"

# Machine types
# Available types: c1a.s, c1a.m, c1a.l, m1a.s, m1a.m, m1a.l, etc.
# See: https://docs.evroc.com/compute/virtual-machine-types
export EVROC_CONTROL_PLANE_MACHINE_TYPE="c1a.s"
export EVROC_WORKER_MACHINE_TYPE="c1a.s"

# Disk image
# Available images: ubuntu-minimal.24-04.1, ubuntu-minimal.22-04.1, etc.
# List images: evroc compute disk-images list
export EVROC_IMAGE_NAME="ubuntu-minimal.24-04.1"

# Disk size in GB
export EVROC_DISK_SIZE="20"

# SSH Key Configuration for VM Access
# SSH keys are REQUIRED for remote access to VMs for debugging and troubleshooting.
# The SSH key must be configured BEFORE VM creation and cannot be added later.
# The public key will be added to the 'evroc-user' account on all VMs.
#
# Required environment variables:
#   EVROC_SSH_KEY: The PUBLIC SSH key (ssh-rsa, ssh-ed25519, etc.)
#   EVROC_SSH_PRIVATE_KEY: Path to the PRIVATE key file for SSH connections
#
# Option 1: Auto-detect default SSH key (recommended)
# Automatically uses ~/.ssh/id_ed25519 or ~/.ssh/id_rsa if available
if [ -f "${HOME}/.ssh/id_ed25519.pub" ]; then
    export EVROC_SSH_KEY="$(cat ${HOME}/.ssh/id_ed25519.pub)"
    export EVROC_SSH_PRIVATE_KEY="${HOME}/.ssh/id_ed25519"
elif [ -f "${HOME}/.ssh/id_rsa.pub" ]; then
    export EVROC_SSH_KEY="$(cat ${HOME}/.ssh/id_rsa.pub)"
    export EVROC_SSH_PRIVATE_KEY="${HOME}/.ssh/id_rsa"
else
    echo "WARNING: No default SSH key found. VMs will be created without SSH access."
    echo "To enable SSH access, generate a key first:"
    echo "  ssh-keygen -t ed25519 -C 'evroc-e2e' -f ~/.ssh/id_ed25519"
    export EVROC_SSH_KEY=""
    export EVROC_SSH_PRIVATE_KEY=""
fi
#
# Option 2: Use a specific SSH key
# export EVROC_SSH_KEY="$(cat ~/.ssh/my-custom-key.pub)"
# export EVROC_SSH_PRIVATE_KEY="${HOME}/.ssh/my-custom-key"
#
# Option 3: Generate a new key pair specifically for Evroc VMs
#   ssh-keygen -t ed25519 -C "evroc-capi" -f ~/.ssh/evroc_vm_key -N ""
#   export EVROC_SSH_KEY="$(cat ~/.ssh/evroc_vm_key.pub)"
#   export EVROC_SSH_PRIVATE_KEY="${HOME}/.ssh/evroc_vm_key"
#
# Supported public key types:
#   - ssh-rsa, ssh-ed25519, ecdsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, etc.
#   - See: https://docs.evroc.com/products/compute/howto/access-a-vm.html

# Kubernetes cluster networking
export POD_CIDR="192.168.0.0/16"
export SERVICE_CIDR="10.96.0.0/12"

# Provider settings
export PROVIDER_VERSION="v0.1.0"

# Optional: Set to "true" to skip cleanup on failure (for debugging)
# export SKIP_CLEANUP_ON_FAILURE="false"
